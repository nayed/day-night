{"version":3,"sources":["theme-context.js","App.js","serviceWorker.js","index.js"],"names":["themes","light","bodyBG","sunBG","bgImage","bgSize","bgPosition","dark","GlobalStyles","createGlobalStyle","_templateObject","props","theme","Sun","styled","div","_templateObject2","Input","input","_templateObject3","Label","label","_templateObject4","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","toggleTheme","bind","assertThisInitialized","setState","react_default","a","createElement","Fragment","type","id","onChange","htmlFor","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oOAoBeA,EApBA,CACbC,MAAO,CACLC,OAAQ,UACRC,MAAO,UACPC,QAAS,UACTC,OAAQ,UACRC,WAAY,WAEdC,KAAM,CACJL,OAAQ,UACRC,MAAO,UACPC,QAAO,4UAIPC,OAAQ,qDACRC,WAAY,+4CCXhB,IAAME,EAAeC,YAAHC,IAQA,SAAAC,GAAK,OAAIA,EAAMC,MAAMV,QAAU,QACzB,SAAAS,GAAK,OAAIA,EAAMC,MAAMR,SAAW,QACjC,SAAAO,GAAK,OAAIA,EAAMC,MAAMP,QAAU,QAC3B,SAAAM,GAAK,OAAIA,EAAMC,MAAMN,YAAc,SAIxDO,EAAMC,IAAOC,IAAVC,IACO,SAAAL,GAAK,OAAIA,EAAMC,MAAMT,OAAS,SAcxCc,EAAQH,IAAOI,MAAVC,KAeLC,EAAQN,IAAOO,MAAVC,KAyDIC,cA5Bb,SAAAA,EAAYZ,GAAO,IAAAa,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMhB,KAEDoB,MAAQ,CACXnB,MAAOZ,EAAOC,OAEhBuB,EAAKQ,YAAcR,EAAKQ,YAAYC,KAAjBR,OAAAS,EAAA,EAAAT,QAAAS,EAAA,EAAAT,CAAAD,KANFA,6EAUjBG,KAAKQ,SAAS,SAAAJ,GAAK,MAAK,CACtBnB,MAAOmB,EAAMnB,QAAUZ,EAAOO,KAAOP,EAAOC,MAAQD,EAAOO,yCAM7D,OACE6B,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACEH,EAAAC,EAAAC,cAAC9B,EAAiBmB,KAAKI,OACvBK,EAAAC,EAAAC,cAACrB,EAAD,CAAOuB,KAAK,WAAWC,GAAG,SAASC,SAAUf,KAAKK,cAClDI,EAAAC,EAAAC,cAAClB,EAAD,CAAOuB,QAAQ,UAAf,UACAP,EAAAC,EAAAC,cAACzB,EAAQc,KAAKI,eAvBJa,aClEEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOf,EAAAC,EAAAC,cAACc,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.7dbc73f8.chunk.js","sourcesContent":["const themes = {\n  light: {\n    bodyBG: '#2eaae5',\n    sunBG: '#fffb84',\n    bgImage: 'inherit',\n    bgSize: 'inherit',\n    bgPosition: 'inherit'\n  },\n  dark: {\n    bodyBG: '#00000d',\n    sunBG: '#fffef8',\n    bgImage: `radial-gradient(white, rgba(255,255,255,.2) 2px, transparent 10px),\n              radial-gradient(white, rgba(255,255,255,.15) 1px, transparent 5px),\n              radial-gradient(white, rgba(255,255,255,.1) 2px, transparent 10px),\n              radial-gradient(rgba(255,255,255,.4), rgba(255,255,255,.1) 2px, transparent 5px)`,\n    bgSize: '550px 550px, 350px 350px, 250px 250px, 150px 150px',\n    bgPosition: '0 0, 40px 60px, 130px 270px, 70px 100px'\n  }\n}\n\nexport default themes\n","import React, { Component } from 'react'\nimport styled from 'styled-components'\nimport { createGlobalStyle } from 'styled-components'\nimport themes from './theme-context'\n\nconst GlobalStyles = createGlobalStyle`\n  *, *:before, *:after {\n    box-sizing: inherit;\n    margin:0;\n    padding:0;\n  }\n\n  body {\n    background: ${props => props.theme.bodyBG || '#2ea'};\n    background-image: ${props => props.theme.bgImage || '#2ea'};\n    background-size: ${props => props.theme.bgSize || '#2ea'};\n    background-position: ${props => props.theme.bgPosition || '#2ea'};\n  }\n`\n\nconst Sun = styled.div`\n  background: ${props => props.theme.sunBG || '#2ea'}\n  border-radius: 50%;\n  box-shadow: 0 0 2.5rem 1rem #ffffff;\n  bottom: 0;\n  height: 8rem;\n  left: 0;\n  margin: auto;\n  opacity: 0.9;\n  position: absolute;\n  right: 0;\n  top: 0;\n  width: 8rem;\n`\n\nconst Input = styled.input`\n  height: 0;\n  width: 0;\n  visibility: hidden;\n\n  &:checked + label {\n    background: #9eade6;\n  }\n\n  &:checked + label:after {\n    left: calc(100% - 5px);\n    transform: translateX(-100%);\n  }\n`\n\nconst Label = styled.label`\n  cursor: pointer;\n  text-indent: -9999px;\n  width: 4rem;\n  height: 2rem;\n  margin-left: 2rem;\n  background: #0e6caf;\n  display: block;\n  border-radius: 2rem;\n  position: relative;\n\n  &:after {\n    content: '';\n    position: absolute;\n    top: 5px;\n    left: 5px;\n    width: 1.375rem;\n    height: 1.375rem;\n    background: #fff;\n    border-radius: 1.375rem;\n    transition: 0.3s;\n  }\n\n  &:active:after {\n    width: 4.125rem;\n  }\n`\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      theme: themes.light\n    }\n    this.toggleTheme = this.toggleTheme.bind(this)\n  }\n\n  toggleTheme() {\n    this.setState(state => ({\n      theme: state.theme === themes.dark ? themes.light : themes.dark\n    }))\n  }\n\n  render() {\n    // console.log(this.state.theme)\n    return (\n      <>\n        <GlobalStyles {...this.state} />\n        <Input type=\"checkbox\" id=\"switch\" onChange={this.toggleTheme} />\n        <Label htmlFor=\"switch\">Toggle</Label>\n        <Sun {...this.state} />\n      </>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}